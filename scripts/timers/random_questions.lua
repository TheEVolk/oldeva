local qudatabase = {
    {
        q = "–í –∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö –∏–≥—Ä –∏–≥—Ä–∞—é—Ç –Ω–µ –∫–ª—é—à–∫–æ–π?",
        variants = "–•–æ–∫–∫–µ–π, –ì–æ–ª—å—Ñ, –ü–æ–ª–æ",
        right = "–ë–∏–ª—å—è—Ä–¥"
    }, {
        q = "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª –≤–µ–ª–∏–∫–∏–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä 18-–≥–æ –≤–µ–∫–∞ –ö—Ä–∏—Å—Ç–æ—Ñ –í–∏–ª–ª–∏–±–∞–ª—å–¥ –ì–ª—é–∫?",
        variants = "–ú–∏–ª–∞–Ω, –í–µ–Ω–∞, –ü–∞—Ä–∏–∂",
        right = "–ë–µ—Ä–ª–∏–Ω"
    }, {
        q = "–ö—Ç–æ –ø–µ—Ä–≤—ã–º –¥–æ–∫–∞–∑–∞–ª –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–µ—Ç?",
        variants = "–ì–∞–ª–∏–ª–µ–π, –ö–æ–ø–µ—Ä–Ω–∏–∫, –ö–µ–ø–ª–µ—Ä",
        right = "–ì–∞–ª–ª–µ–π"
    }, {
        q = "–ü—Ä–æ –∫–∞–∫—É—é –ª–µ—Ç–Ω—é—é –ø–æ–≥–æ–¥—É –≥–æ–≤–æ—Ä—è—Ç \"–í—ë–¥—Ä–æ\" ?",
        variants = "–¢–µ–ø–ª–∞—è –¥–æ–∂–¥–ª–∏–≤–∞—è, –ü—Ä–æ—Ö–ª–∞–¥–Ω–∞—è –¥–æ–∂–¥–ª–∏–≤–∞—è, –î–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏",
        right = "–°—É—Ö–∞—è —è—Å–Ω–∞—è"
    }, --[[{
        q = "–° –∫–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–∞–Ω –ß–µ—Ö–∏—è –Ω–µ –≥—Ä–∞–Ω–∏—á–∏—Ç?",
        variants = "–ì–µ—Ä–º–∞–Ω–∏—è, –ê–≤—Å—Ç—Ä–∏—è, –ü–æ–ª—å—à–∞",
        right = "–í–µ–Ω–≥—Ä–∏—è"
    },]] {
        q = "–ì–¥–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–∂–∏–≤–∞—é—Ç —Ç–∞—Ç—ã?",
        variants = "–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω, –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω, –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω",
        right = "–î–∞–≥–µ—Å—Ç–∞–Ω"
    }, {
        q = "–ö–∞–∫, –≤ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –∑–≤—É—á–∞–ª–æ –±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ '–ú–∏–º–∏–Ω–æ'?",
        variants = "–ú–µ–¥–≤–µ–¥—å, –ì–æ—Ä–∞, –õ—é–±–æ–≤—å",
        right = "–°–æ–∫–æ–ª"
    }, {
        q = "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫—É—Ä—Å –ø–∞—Ä—É—Å–Ω–æ–≥–æ —Å—É–¥–Ω–∞, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤–µ—Ç—Ä–∞?",
        variants = "–ë–µ–π–¥–µ–≤–∏–Ω–¥, –ì–∞–ª—Ñ–∏–Ω–¥, –ë–∞–∫—à—Ç–∞–≥",
        right = "–§–æ—Ä–¥–µ–≤–∏–Ω–¥"
    }, {
        q = "–ù–∞ –≤–µ—Ä—à–∏–Ω–µ –∫–∞–∫–æ–π –≥–æ—Ä—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ —Å–æ—Ä–æ–∫–∞–º–µ—Ç—Ä–æ–≤–∞—è —Å—Ç–∞—Ç—É—è –•—Ä–∏—Å—Ç–∞, —è–≤–ª—è—é—â–∞—è—Å—è —Å–∏–º–≤–æ–ª–æ–º –†–∏–æ-–¥–µ-–ñ–∞–Ω–µ–π—Ä–æ?",
        variants = "–¢—É–ø—É–Ω–≥–∞—Ç–æ, –£–∞—Å–∫–∞—Ä–∞–Ω, –ò–ª—å–∏–º–∞–Ω–∏",
        right = "–ö–æ—Ä–∫–æ–≤–∞–¥–æ"
    }, {
        q = "–ö–∞–∫–æ–µ –±—Ä—é—Ö–æ, —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–æ—Ä–Ω–æ–π —Ä—É—Å—Å–∫–æ–π –ø–æ—Å–ª–æ–≤–∏—Ü–µ, –≥–ª—É—Ö–æ –∫ —É—á–µ–Ω—å—é?",
        variants = "–¢–æ–ª—Å—Ç–æ–µ, –¢–æ—â–µ–µ, –ü—É—Å—Ç–æ–µ",
        right = "–°—ã—Ç–æ–µ"
    }
}
questions_bans={}
hooks.add_action("bot_check", function(msg)
	if msg.peer_id ~= 2000000002 then return end
	if not tonumber(msg.text or '') then return end
    local gq = global_question
    if not gq then return end
    if questions_bans[msg.from_id] then return end
    if gq[1] ~= tonumber(msg.text) then
        VK.messages.send {
            message = string.format("‚≠ï –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.\nüö´ –í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."),
            peer_id = 2000000002
        }
        questions_bans[msg.from_id] = true
        return
    end

    local user = db.get_user(msg.from_id)
    user:addMoneys(gq[2])
    user:addScore(math.random(10, 80))

    VK.messages.send {
        message = string.format("‚úî %s –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏–ª %s –±–∏—Ç!", user:r(), comma_value(gq[2])),
        peer_id = 2000000002
    }

    questions_bans = {}

    global_question = nil
end, 1000)

function create_q(text, right, variants)
    global_question = { right, math.random(5000) }

    local variants_text = "";
    if variants then
        variants_text = "\nüî¢ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:"
        for i,v in ipairs(variants) do
            variants_text = variants_text .. "\n" .. i .. " ‚û§ " .. v
        end
        variants_text = variants_text .. "\n"
    end

    VK.messages.send {
        message = table.concat({
            "üí∞ –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–≤—ã–º –∏ –ø–æ–ª—É—á–∏ –±–∏—Ç—ã!",
            "‚ùî >> "..text,
            variants_text,
            "‚ùï –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
        }, '\n'),
        peer_id = 2000000002
    }
end

function q_createmath()
    local obj = math.random(100);
    local operation = trand { '+', '-' }
    obj = math.random (100) > 50 and obj..' '..operation..' '..math.random(100) or math.random(100)..' '..operation..' '..obj

    create_q("–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç "..obj, load("return "..obj)())
end

function q_createansw()
    local a = trand(qudatabase)
    local variants = string.split(a.variants, ', ')
    table.insert(variants, a.right)
    table.sort(variants, function(_,_2) return math.random(2) == 1 end)
    local right_num = 0
    for i,v in ipairs(variants) do if v == a.right then right_num = i end end
    create_q(a.q, right_num, variants)
end

timers.create(60000, 0, function()
    if math.random(100) < 95 then return end
    trand({ q_createmath, q_createansw })()
end)
