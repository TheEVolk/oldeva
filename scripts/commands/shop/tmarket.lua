local command = botcmd.new("—Ç–∫—É–ø", "–º–∞–≥–∞–∑–∏–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", {dev = 1})

function get_number()
    local alltr = db.select("gosnum", "tr_obj")
    function check_number(num) for i = 1,#alltr do if alltr[i].gosnum == num then return true end end end
    local number
    repeat number = transport.generate_number() until not check_number(number)
    return number
end

command:addsub("–∑–∞–≤–æ–¥", function(msg, args, other, rmsg, user)
    local brands = db "SELECT DISTINCT brand FROM tr_models"
    rmsg:lines ("üöï –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ä–æ–∫:", { brands, "‚û§ :i:. :v.brand:" }, tip_nc)
    numcmd.linst_list (user, function(msg, brand, other, rmsg, user)
        return command.sub["–º–∞—Ä–∫–∞"][3](msg, {}, other, rmsg, user, brand.brand)
    end, brands)
end)

command:addmsub("–º–∞—Ä–∫–∞", "<–∏–º—è>", "d", function(msg, args, other, rmsg, user, brand_name)
    local models = tca(db.select("*", "tr_models", "`brand` = '%s'", brand_name), "–º–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    rmsg:lines ({ "üöï –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ %s:", brand_name }, { models, "‚û§ :i:. :v.brand: :v.name: >> :comma_value(v.price):" }, tip_nc)
    numcmd.linst_list (user, function(msg, model, other, rmsg, user)
        return command.sub["–∏–Ω—Ñ–æ"][3](msg, {}, other, rmsg, user, brand_name.." "..model.name)
    end, models)
end)

command:addmsub("–∏–Ω—Ñ–æ", "<–∏–º—è>", "d", function(msg, args, other, rmsg, user, name)
    local model = ca(db.select_one("*", "tr_models", "CONCAT(`brand`, ' ', `name`) = '%s'", name), "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    rmsg:lines (
        { "üöï –ê–≤—Ç–æ–º–æ–±–∏–ª—å %s %s", model.brand, model.name },
        { "üí∞ –¶–µ–Ω–∞ >> %s –±–∏—Ç.", comma_value(model.price) },
        { "‚õΩ –¢–æ–ø–ª–∏–≤–æ >> %s (%i –ª./100 –∫–º)", transport.fuel_types[model.fuel_type], model.consumption },
        { "‚è≤ –°–∫–æ—Ä–æ—Å—Ç—å >> %i –∫–º/—á", model.speed },
        "", {"‚Ñπ –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ <<—Ç–∫—É–ø –∫—É–ø–∏—Ç—å %s %s>>.", model.brand, model.name}
    )

    oneb(rmsg, "—Ç–∫—É–ø –∫—É–ø–∏—Ç—å %s %s", model.brand, model.name)
    transport.get_transport_image(model, transport.generate_number()):write(root.."/temp/tr_"..msg.peer_id..".png")
    rmsg.attachment = upload.get("photo_messages", msg.peer_id, root.."/temp/tr_"..msg.peer_id..".png")
end)

command:addmsub("–∫—É–ø–∏—Ç—å", "<–∏–º—è>", "d", function(msg, args, other, rmsg, user, name)
    local model = ca(db.select_one("*", "tr_models", "CONCAT(`brand`, ' ', `name`) = '%s'", name), "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    ca(user:getValue 'tslots' > db.get_count('tr_obj', "owner = %i", user.vkid), "–≤ –≤–∞—à–µ–º –≥–∞—Ä–∞–∂–µ –Ω–µ—Ç –º–µ—Å—Ç–∞")
    user:buy(model.price)

    local number = get_number()
    local city = math.random(db.get_count('cities'))

    db(
        "INSERT INTO `tr_obj`(`model`, `owner`, `buy_data`, `gosnum`, `pos`) VALUES (%i, %i, %i, '%s', %i)",
        model.id, user.vkid, os.time(), number, city
    )

    rmsg:lines(
        { "üÜï –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ %s %s!", model.brand, model.name },
        { "üÜî –ù–æ–º–µ—Ä >> %s", number },
        { "üèô –ì–æ—Ä–æ–¥ >> %s", db.select_one('name', 'cities', 'id = %i', city).name }
    )
end)

command.sub['—Ä—ã–Ω–æ–∫'] = function (msg, args, other, rmsg, user)
    return "–†—ã–Ω–æ–∫ –µ—â—ë –ø–æ–∫–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è..."
end

function command.exe(msg, args, other, rmsg, user, city_name)
    rmsg:lines("‚û§ 1. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —Å–∞–ª–æ–Ω–∞ (–ù–æ–≤—ã–π)", "‚û§ 2. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —Ä—ã–Ω–∫–∞ (–ë/–£)")

    rmsg.keyboard = [[{
        "one_time": true,
        "buttons": [
            [{"action": {"type": "text","label": "–°–∞–ª–æ–Ω", "payload": "1"},"color": "primary"},
             {"action": {"type": "text","label": "–†—ã–Ω–æ–∫", "payload": "2"},"color": "default"}]
        ]
    }]]

    numcmd.linst(user, function(msg, num, other, rmsg, user)
        local funcs = { "–∑–∞–≤–æ–¥", "—Ä—ã–Ω–æ–∫" }

        if not funcs[num] then return command.exe(msg, {num}, other, rmsg, user) end
        return command.sub[funcs[num]](msg, {num}, other, rmsg, user)
    end)
end

return command
