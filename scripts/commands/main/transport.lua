local command = botcmd.new("—Ç—Ä", "—Å–ø–∏—Å–æ–∫ –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", {dev=1})

function get_number()
    local alltr = db.select("gosnum", "tr_obj")
    function check_number(num) for i = 1,#alltr do if alltr[i].gosnum == num then return true end end end
    local number
    repeat number = transport.generate_number() until not check_number(number)
    return number
end


command:addmsub("–∏–Ω—Ñ–æ", "<–≥–æ—Å. –Ω–æ–º–µ—Ä>", "s", function(msg, args, other, rmsg, user, number)
    local obj = ca(db.select_one("*", "tr_obj", "`gosnum`='%s'", number), "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    local model = transport.models[obj.model]

    rmsg:lines (
        { "üöò %s [%s]", transport.full_name(obj), obj.gosnum },
        { "üé© –í–ª–∞–¥–µ–ª–µ—Ü >> %s", db.get_user(obj.owner):r() },
        { "üåÜ –ü–æ–∑–∏—Ü–∏—è >> %s", transport.get_status(obj, true) },
        { "‚õΩ –¢–æ–ø–ª–∏–≤–æ >> %s (%i –ª./100 –∫–º)", transport.fuel_types[model.fuel_type], model.consumption },
        { "‚è≤ –°–∫–æ—Ä–æ—Å—Ç—å >> %i –∫–º/—á", model.speed }
    )

    transport.get_obj_image(obj):write(root.."/temp/tr_"..msg.peer_id..".png")
    rmsg.attachment = upload.get("photo_messages", msg.peer_id, root.."/temp/tr_"..msg.peer_id..".png")

    if obj.owner == user.vkid then
        numcmd.menu_funcs(rmsg, user, {
            obj.pos > 0 and {{ 1, "üì¶ –ü–µ—Ä–µ–≤–æ–∑–∫–∏", "–ø–µ—Ä–µ–≤–æ–∑–∫–∏ "..cities.cities[obj.pos].name }},
            obj.pos > 0 and {{ 2, "üöï –¢–∞–∫—Å–æ–≤–∞—Ç—å", "—Ç–∞–∫—Å–∏ —Å–µ—Ç "..obj.gosnum }},
            {{ 3, "‚ôª –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–≤–∞–ª–∫—É", "—Ç—Ä —Å–≤–∞–ª–∫–∞ "..obj.gosnum }}
        })
    end
end)

command:addsub("—Ç–æ–ø–ª–∏–≤–æ", function (msg, args, other, rmsg, user)
    local prices = net.jSend("https://www.cbr-xml-daily.ru/daily_json.js")
    rmsg:lines(
        "‚õΩ –¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ:",
        { "‚û§ A92 - %i –±–∏—Ç/–ª–∏—Ç—Ä;", math.floor(prices.Valute.AUD.Value) },
        { "‚û§ A95 - %i –±–∏—Ç/–ª–∏—Ç—Ä;", math.floor(prices.Valute.CAD.Value) },
        { "‚û§ A98 - %i –±–∏—Ç/–ª–∏—Ç—Ä;", math.floor(prices.Valute.KRW.Value) },
        { "‚û§ DT - %i –±–∏—Ç/–ª–∏—Ç—Ä.", math.floor(prices.Valute.SGD.Value) }
    )
end)

command:addmsub("–º–∞—Ä—à—Ä—É—Ç", "<–≥–æ—Å. –Ω–æ–º–µ—Ä> <–≥–æ—Ä–æ–¥>", "sd", function(msg, args, other, rmsg, user, gosnum, city_name)
    local obj = ca(db.select_one("*", "tr_obj", "`gosnum`='%s'", gosnum), "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    local to = ca(transport.find_city(city_name), "–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    local model = transport.models[obj.model]

    ca(not db.select_one('id', 'taxi_tr', "trid = %i", obj.id), "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ —Å–µ–∞–Ω—Å–µ —Ç–∞–∫—Å–∏")
    ca(obj.pos > 0, "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–∂–µ –≤ –¥–æ—Ä–æ–≥–µ")

    local from = transport.cities[obj.pos]
    local distance = math.sqrt(math.pow(to.x - from.x, 2), math.pow(to.y - from.y, 2))
    ca(distance ~= 0, "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–∞–º")
    local fuel = math.floor(distance/100*model.consumption)

    rmsg:lines(
        { "üöò %s ‚Ä¢ %s", obj.gosnum, transport.full_name(obj) },
        { "üõ§ %s - %s", from.name, to.name },
        { "‚Üî –î–∏—Å—Ç–∞–Ω—Ü–∏—è %i –∫–º.", distance },
        { "‚õΩ %i –ª–∏—Ç—Ä–æ–≤ —Ç–æ–ø–ª–∏–≤–∞.", fuel },
        { "‚åö %s", os.date("!%H —á–∞—Å–æ–≤ %M –º–∏–Ω—É—Ç", math.floor(distance/model.speed*240)) },
        { "‚û§ 1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –º–∞—Ä—à—Ä—É—Ç" }
    )

    rmsg.keyboard = [[{
        "one_time": true,
        "buttons": [
            [{"action": {"type": "text","label": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –º–∞—Ä—à—Ä—É—Ç", "payload": "1"},"color": "primary"}]
        ]
    }]]

    numcmd.linst(user, function(msg, num, other, rmsg, user)
        if num==1 then
            user:buy(transport.get_fuel_price(fuel, model.fuel_type))

            db(
                "INSERT INTO `routes`(`from`, `to`, `start`, `end`, `tid`) VALUES ('%i','%i','%i','%i','%i')",
                from.id, to.id, os.time(), os.time() + math.floor(distance/model.speed*240), obj.id
            )

            db("UPDATE `tr_obj` SET `pos` = %i WHERE `id` = %i", -db.select_one("id", "routes", "tid=%i", obj.id).id, obj.id)
            rmsg:line ("&#10035; –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –º–∞—Ä—à—Ä—É—Ç.")
            oneb(rmsg, "—Ç—Ä")
        end
    end)
end)

command:addmsub("—Å–≤–∞–ª–∫–∞", "<–≥–æ—Å. –Ω–æ–º–µ—Ä>", "s", function(msg, args, other, rmsg, user, gosnum)
    local obj = ca(db.select_one("*", "tr_obj", "`gosnum`='%s'", gosnum), "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    ca(obj.owner == user.vkid, "—ç—Ç–æ –Ω–µ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    ca(obj.pos > 0, "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ø—É—Ç–∏")
    ca(not db.select_one('id', 'taxi_tr', "trid = %i", obj.id), "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ —Å–µ–∞–Ω—Å–µ —Ç–∞–∫—Å–∏")

    local yes = function(msg, args, other, rmsg, user)
  		if obj.owner == user.vkid then
        local tr_price = tonumber(db.select_one('price', 'tr_models', 'id=%i', obj.model).price)
        rmsg:line("üö© %s [%s] –≤—ã–±—Ä–æ—à–µ–Ω.", transport.full_name(obj), gosnum)
        user:addMoneys(math.random(tr_price))
        db("DELETE FROM `tr_obj` WHERE id=%i", obj.id)
        numcmd.linst(user, nil)
  		end
  	end

  	rmsg:line("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?")
  	numcmd.lmenu_funcs(rmsg, user, {{
  		{ 1, "–ù–µ—Ç", command.exe, "positive" },
  		{ 2, "–î–∞", yes, "negative" }
  	}})
end)

function command.exe(msg, args, other, rmsg, user)
    local transports = db.select("*", "tr_obj", "owner = %i", user.vkid)

    if #transports == 0 then
        rmsg:lines("üöò –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.", "üõ§ –°–∞–º–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏!")
        numcmd.onef(rmsg, user, "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "—Ç–∫—É–ø")
        return
    end

	rmsg:line("üöò –í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç >> %i —à—Ç.", #transports)
	for i,obj in ipairs(transports) do
		--rmsg:line("‚û§ %i. %s ‚Ä¢ %s >> %s", i, obj.gosnum, transport.short_name(obj), transport.get_status(obj))
		rmsg:line("‚û§ %i. %s [%s]", i, transport.full_name(obj), transport.get_status(obj))
	end
    rmsg:line(tip_nc)

    numcmd.linst_list(user, function(msg, obj, other, rmsg, user)
        return command.sub["–∏–Ω—Ñ–æ"][3](msg, {}, other, rmsg, user, obj.gosnum)
    end, transports)
end

return command
